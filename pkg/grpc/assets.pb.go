// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v3.21.12
// source: assets.proto

package assets_grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ChampionId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChampionId) Reset() {
	*x = ChampionId{}
	mi := &file_assets_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChampionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChampionId) ProtoMessage() {}

func (x *ChampionId) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChampionId.ProtoReflect.Descriptor instead.
func (*ChampionId) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{0}
}

func (x *ChampionId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ItemId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ItemId) Reset() {
	*x = ItemId{}
	mi := &file_assets_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItemId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemId) ProtoMessage() {}

func (x *ItemId) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemId.ProtoReflect.Descriptor instead.
func (*ItemId) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{1}
}

func (x *ItemId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Default image structure with what we need from the DataDragon.
type Image struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FullImage     string                 `protobuf:"bytes,1,opt,name=fullImage,proto3" json:"fullImage,omitempty"`
	Sprite        string                 `protobuf:"bytes,2,opt,name=sprite,proto3" json:"sprite,omitempty"`
	X             int32                  `protobuf:"varint,3,opt,name=x,proto3" json:"x,omitempty"`
	Y             int32                  `protobuf:"varint,4,opt,name=y,proto3" json:"y,omitempty"`
	W             int32                  `protobuf:"varint,5,opt,name=w,proto3" json:"w,omitempty"`
	H             int32                  `protobuf:"varint,6,opt,name=h,proto3" json:"h,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_assets_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{2}
}

func (x *Image) GetFullImage() string {
	if x != nil {
		return x.FullImage
	}
	return ""
}

func (x *Image) GetSprite() string {
	if x != nil {
		return x.Sprite
	}
	return ""
}

func (x *Image) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Image) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Image) GetW() int32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Image) GetH() int32 {
	if x != nil {
		return x.H
	}
	return 0
}

// Spell data for the champion.
type Spell struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Cooldown      *string                `protobuf:"bytes,4,opt,name=cooldown,proto3,oneof" json:"cooldown,omitempty"`
	Cost          *string                `protobuf:"bytes,5,opt,name=cost,proto3,oneof" json:"cost,omitempty"`
	Image         *Image                 `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	ChampionId    string                 `protobuf:"bytes,7,opt,name=ChampionId,proto3" json:"ChampionId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Spell) Reset() {
	*x = Spell{}
	mi := &file_assets_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Spell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spell) ProtoMessage() {}

func (x *Spell) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spell.ProtoReflect.Descriptor instead.
func (*Spell) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{3}
}

func (x *Spell) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Spell) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Spell) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Spell) GetCooldown() string {
	if x != nil && x.Cooldown != nil {
		return *x.Cooldown
	}
	return ""
}

func (x *Spell) GetCost() string {
	if x != nil && x.Cost != nil {
		return *x.Cost
	}
	return ""
}

func (x *Spell) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Spell) GetChampionId() string {
	if x != nil {
		return x.ChampionId
	}
	return ""
}

// Champion data that we need to display.
type Champion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Title         string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Image         *Image                 `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Spells        []*Spell               `protobuf:"bytes,6,rep,name=spells,proto3" json:"spells,omitempty"`
	Passive       *Spell                 `protobuf:"bytes,7,opt,name=passive,proto3" json:"passive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Champion) Reset() {
	*x = Champion{}
	mi := &file_assets_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Champion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Champion) ProtoMessage() {}

func (x *Champion) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Champion.ProtoReflect.Descriptor instead.
func (*Champion) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{4}
}

func (x *Champion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Champion) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Champion) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Champion) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Champion) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Champion) GetSpells() []*Spell {
	if x != nil {
		return x.Spells
	}
	return nil
}

func (x *Champion) GetPassive() *Spell {
	if x != nil {
		return x.Passive
	}
	return nil
}

// Gold for the item.
type Gold struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          int32                  `protobuf:"varint,1,opt,name=base,proto3" json:"base,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Sell          int32                  `protobuf:"varint,3,opt,name=sell,proto3" json:"sell,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Gold) Reset() {
	*x = Gold{}
	mi := &file_assets_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Gold) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gold) ProtoMessage() {}

func (x *Gold) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gold.ProtoReflect.Descriptor instead.
func (*Gold) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{5}
}

func (x *Gold) GetBase() int32 {
	if x != nil {
		return x.Base
	}
	return 0
}

func (x *Gold) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *Gold) GetSell() int32 {
	if x != nil {
		return x.Sell
	}
	return 0
}

// Item data that we need to display.
type Item struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Plaintext     string                 `protobuf:"bytes,4,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	Image         *Image                 `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Gold          *Gold                  `protobuf:"bytes,6,opt,name=gold,proto3" json:"gold,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Item) Reset() {
	*x = Item{}
	mi := &file_assets_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_assets_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_assets_proto_rawDescGZIP(), []int{6}
}

func (x *Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Item) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Item) GetPlaintext() string {
	if x != nil {
		return x.Plaintext
	}
	return ""
}

func (x *Item) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Item) GetGold() *Gold {
	if x != nil {
		return x.Gold
	}
	return nil
}

var File_assets_proto protoreflect.FileDescriptor

var file_assets_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x22, 0x1c, 0x0a, 0x0a, 0x43,
	0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x06, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x75, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x75, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x75, 0x6c, 0x6c, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x70,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c,
	0x0a, 0x01, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x22, 0xe7, 0x01, 0x0a, 0x05, 0x53,
	0x70, 0x65, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x63, 0x6f, 0x73, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x52, 0x06, 0x73, 0x70, 0x65,
	0x6c, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76,
	0x65, 0x22, 0x44, 0x0a, 0x04, 0x47, 0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x22, 0xbb, 0x01, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x6f, 0x6c, 0x64, 0x52,
	0x04, 0x67, 0x6f, 0x6c, 0x64, 0x32, 0x9d, 0x01, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x17, 0x52, 0x65, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x15, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x6d, 0x70, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x13, 0x52, 0x65, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x13, 0x2e, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x1a, 0x11, 0x2e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x00, 0x42, 0x1a, 0x5a, 0x18, 0x67, 0x6f, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x5f, 0x67, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_assets_proto_rawDescOnce sync.Once
	file_assets_proto_rawDescData = file_assets_proto_rawDesc
)

func file_assets_proto_rawDescGZIP() []byte {
	file_assets_proto_rawDescOnce.Do(func() {
		file_assets_proto_rawDescData = protoimpl.X.CompressGZIP(file_assets_proto_rawDescData)
	})
	return file_assets_proto_rawDescData
}

var file_assets_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_assets_proto_goTypes = []any{
	(*ChampionId)(nil), // 0: assets_grpc.ChampionId
	(*ItemId)(nil),     // 1: assets_grpc.ItemId
	(*Image)(nil),      // 2: assets_grpc.Image
	(*Spell)(nil),      // 3: assets_grpc.Spell
	(*Champion)(nil),   // 4: assets_grpc.Champion
	(*Gold)(nil),       // 5: assets_grpc.Gold
	(*Item)(nil),       // 6: assets_grpc.Item
}
var file_assets_proto_depIdxs = []int32{
	2, // 0: assets_grpc.Spell.image:type_name -> assets_grpc.Image
	2, // 1: assets_grpc.Champion.image:type_name -> assets_grpc.Image
	3, // 2: assets_grpc.Champion.spells:type_name -> assets_grpc.Spell
	3, // 3: assets_grpc.Champion.passive:type_name -> assets_grpc.Spell
	2, // 4: assets_grpc.Item.image:type_name -> assets_grpc.Image
	5, // 5: assets_grpc.Item.gold:type_name -> assets_grpc.Gold
	0, // 6: assets_grpc.assetsService.RevalidateChampionCache:input_type -> assets_grpc.ChampionId
	1, // 7: assets_grpc.assetsService.RevalidateItemCache:input_type -> assets_grpc.ItemId
	4, // 8: assets_grpc.assetsService.RevalidateChampionCache:output_type -> assets_grpc.Champion
	6, // 9: assets_grpc.assetsService.RevalidateItemCache:output_type -> assets_grpc.Item
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_assets_proto_init() }
func file_assets_proto_init() {
	if File_assets_proto != nil {
		return
	}
	file_assets_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_assets_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_assets_proto_goTypes,
		DependencyIndexes: file_assets_proto_depIdxs,
		MessageInfos:      file_assets_proto_msgTypes,
	}.Build()
	File_assets_proto = out.File
	file_assets_proto_rawDesc = nil
	file_assets_proto_goTypes = nil
	file_assets_proto_depIdxs = nil
}
